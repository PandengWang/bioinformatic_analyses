#!/usr/bin/env python3
# -*- coding: utf-8 -*-


__author__ = 'Pandeng Wang'
__version__ = '1.0'
__date__ = '2018-02-03'

import sys
import os
import argparse


## This version is not appropriate, because we treated one scaffold is outlier
## when the scgs in it are also exist in other scaffold, but this info is not enough to 
## let us to remove this scaffold. We should keep one scaffold among all scaffolds who both 
## have the same scgs.
# def parse_scg_info(f):
	# scg_outlier = []
	# scg_keep = []
	# scaffold_to_scg = {}
	# for line in f:
		# list = line.strip().split("\t")
		# if int(list[4]) > int(list[6]):
			# scg_keep.append(list[0])
		# else:
			# scg_outlier.append(list[0])
			# scaffold_len = list[0].split("_")[3]
			# scaffold_to_scg[list[0]] = "\t".join(list[1:].append(scaffold_len))
	# return scg_keep, scg_outlier, scaffold_to_scg
	
def parse_scg_info(f):
	scg_potentail_outlier = []
	scg_all = []
	scaffold_to_scg = {}
	for line in f:
		list = line.strip().split("\t")
		scg_all.append(list[0])
		if int(list[6]) != 0:
			scg_potentail_outlier.append(list[0])
			scaffold_len = list[0].split("_")[3]
			new_list = list[1:]
			new_list.append(scaffold_len)
			scaffold_to_scg[list[0]] = "\t".join(new_list)
			
	return scg_all, scg_potentail_outlier, scaffold_to_scg

def parse_taxon_outlier(f):
	taxon_outlier = []
	scaffold_to_bin = {}
	for line in f:
		if line.startswith("#"):
			continue
		
		list = line.strip().split("\t")
		taxon_outlier.append(list[0])
		scaffold_to_bin[list[0]] = list[1]
	return taxon_outlier, scaffold_to_bin

	
def parse_ge_outlier(f):
	ge_outlier = []
	scaffold_to_bin = {}
	for line in f:
		if line.startswith("#"):
			continue
		
		list = line.strip().split("\t")
		ge_outlier.append(list[0])
		scaffold_to_bin[list[0]] = list[1]
	return ge_outlier, scaffold_to_bin



def main(args):
	out_title = ["Scaffold id","Genome id"]
	
	iscg = open(args.iscg, "r")
	scg_all, scg_potentail_outlier, scaffold_to_scg = parse_scg_info(iscg)
	iscg.close()
	
	itaxon = open(args.itaxon, "r")
	taxon_outlier, taxon_scaff_to_bin = parse_taxon_outlier(itaxon)
	itaxon.close()
	
	ige = open(args.ige, "r")
	ge_outlier, ge_scaff_to_bin = parse_ge_outlier(ige)
	ige.close()
	
	scaffold_to_bin = dict(taxon_scaff_to_bin, **ge_scaff_to_bin)
	
	sub_outlier = list(set(taxon_outlier).union(set(ge_outlier)) - set(scg_all))
	
	out = open(args.o, "w")
	out.writelines(["\t".join(out_title), "\n"])
	for item in sub_outlier:
		out.writelines([item+"\t", scaffold_to_bin[item]+"\n"])
	out.close()
	
	out_scg = open(args.oscg, "w")
	for key in scaffold_to_scg:
		out_scg.writelines([key+"\t", scaffold_to_scg[key]+"\n"])
	out_scg.close()



if __name__ == "__main__":
	parser = argparse.ArgumentParser(description = "Identify outlier scaffold for every bin based on scg, genome feature and taxon")
	parser.add_argument("-iscg", type=str, help = "<table> scaffold to SCG info generated by parse CheckM result")
	parser.add_argument("-itaxon", type=str, help = "<table> name of scaffold outlier file which was created by refinem based on taxonomy for every scaffold")
	parser.add_argument("-ige", type=str,help="<table> name of scaffold outlier file which was created by refinem based on coverage, GC and tetranucleotide frequence)")
	parser.add_argument("-o", type=str, default="subfinal_outlier.tsv",help="<otu> name of subFinal_outlier file")
	parser.add_argument("-oscg", type=str, default="SCG_otulier_scaffold.tsv", help="<out> name of SCG outlier file")
	
	args = parser.parse_args()
	
	main(args)